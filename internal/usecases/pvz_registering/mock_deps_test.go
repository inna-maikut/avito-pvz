// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package pvz_registering -typed -destination mock_deps_test.go
//

// Package pvz_registering is a generated GoMock package.
package pvz_registering

import (
	context "context"
	reflect "reflect"

	model "github.com/inna-maikut/avito-pvz/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockpvzRepo is a mock of pvzRepo interface.
type MockpvzRepo struct {
	ctrl     *gomock.Controller
	recorder *MockpvzRepoMockRecorder
	isgomock struct{}
}

// MockpvzRepoMockRecorder is the mock recorder for MockpvzRepo.
type MockpvzRepoMockRecorder struct {
	mock *MockpvzRepo
}

// NewMockpvzRepo creates a new mock instance.
func NewMockpvzRepo(ctrl *gomock.Controller) *MockpvzRepo {
	mock := &MockpvzRepo{ctrl: ctrl}
	mock.recorder = &MockpvzRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpvzRepo) EXPECT() *MockpvzRepoMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockpvzRepo) Register(ctx context.Context, pvz model.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockpvzRepoMockRecorder) Register(ctx, pvz any) *MockpvzRepoRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockpvzRepo)(nil).Register), ctx, pvz)
	return &MockpvzRepoRegisterCall{Call: call}
}

// MockpvzRepoRegisterCall wrap *gomock.Call
type MockpvzRepoRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpvzRepoRegisterCall) Return(arg0 error) *MockpvzRepoRegisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpvzRepoRegisterCall) Do(f func(context.Context, model.PVZ) error) *MockpvzRepoRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpvzRepoRegisterCall) DoAndReturn(f func(context.Context, model.PVZ) error) *MockpvzRepoRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mockmetrics is a mock of metrics interface.
type Mockmetrics struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsMockRecorder
	isgomock struct{}
}

// MockmetricsMockRecorder is the mock recorder for Mockmetrics.
type MockmetricsMockRecorder struct {
	mock *Mockmetrics
}

// NewMockmetrics creates a new mock instance.
func NewMockmetrics(ctrl *gomock.Controller) *Mockmetrics {
	mock := &Mockmetrics{ctrl: ctrl}
	mock.recorder = &MockmetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmetrics) EXPECT() *MockmetricsMockRecorder {
	return m.recorder
}

// PVZRegisteredCountInc mocks base method.
func (m *Mockmetrics) PVZRegisteredCountInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PVZRegisteredCountInc")
}

// PVZRegisteredCountInc indicates an expected call of PVZRegisteredCountInc.
func (mr *MockmetricsMockRecorder) PVZRegisteredCountInc() *MockmetricsPVZRegisteredCountIncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PVZRegisteredCountInc", reflect.TypeOf((*Mockmetrics)(nil).PVZRegisteredCountInc))
	return &MockmetricsPVZRegisteredCountIncCall{Call: call}
}

// MockmetricsPVZRegisteredCountIncCall wrap *gomock.Call
type MockmetricsPVZRegisteredCountIncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmetricsPVZRegisteredCountIncCall) Return() *MockmetricsPVZRegisteredCountIncCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmetricsPVZRegisteredCountIncCall) Do(f func()) *MockmetricsPVZRegisteredCountIncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmetricsPVZRegisteredCountIncCall) DoAndReturn(f func()) *MockmetricsPVZRegisteredCountIncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
