// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package pvz_list_getting -typed -destination mock_deps_test.go
//

// Package pvz_list_getting is a generated GoMock package.
package pvz_list_getting

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/inna-maikut/avito-pvz/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockpvzRepo is a mock of pvzRepo interface.
type MockpvzRepo struct {
	ctrl     *gomock.Controller
	recorder *MockpvzRepoMockRecorder
	isgomock struct{}
}

// MockpvzRepoMockRecorder is the mock recorder for MockpvzRepo.
type MockpvzRepoMockRecorder struct {
	mock *MockpvzRepo
}

// NewMockpvzRepo creates a new mock instance.
func NewMockpvzRepo(ctrl *gomock.Controller) *MockpvzRepo {
	mock := &MockpvzRepo{ctrl: ctrl}
	mock.recorder = &MockpvzRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpvzRepo) EXPECT() *MockpvzRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockpvzRepo) Get(ctx context.Context, pvzIDs []model.PVZID) ([]model.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, pvzIDs)
	ret0, _ := ret[0].([]model.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockpvzRepoMockRecorder) Get(ctx, pvzIDs any) *MockpvzRepoGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockpvzRepo)(nil).Get), ctx, pvzIDs)
	return &MockpvzRepoGetCall{Call: call}
}

// MockpvzRepoGetCall wrap *gomock.Call
type MockpvzRepoGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpvzRepoGetCall) Return(arg0 []model.PVZ, arg1 error) *MockpvzRepoGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpvzRepoGetCall) Do(f func(context.Context, []model.PVZID) ([]model.PVZ, error)) *MockpvzRepoGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpvzRepoGetCall) DoAndReturn(f func(context.Context, []model.PVZID) ([]model.PVZ, error)) *MockpvzRepoGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockreceptionRepo is a mock of receptionRepo interface.
type MockreceptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockreceptionRepoMockRecorder
	isgomock struct{}
}

// MockreceptionRepoMockRecorder is the mock recorder for MockreceptionRepo.
type MockreceptionRepoMockRecorder struct {
	mock *MockreceptionRepo
}

// NewMockreceptionRepo creates a new mock instance.
func NewMockreceptionRepo(ctrl *gomock.Controller) *MockreceptionRepo {
	mock := &MockreceptionRepo{ctrl: ctrl}
	mock.recorder = &MockreceptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreceptionRepo) EXPECT() *MockreceptionRepoMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockreceptionRepo) Search(ctx context.Context, receptedAtFrom, receptedAtTo *time.Time, offset, limit int64) ([]model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, receptedAtFrom, receptedAtTo, offset, limit)
	ret0, _ := ret[0].([]model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockreceptionRepoMockRecorder) Search(ctx, receptedAtFrom, receptedAtTo, offset, limit any) *MockreceptionRepoSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockreceptionRepo)(nil).Search), ctx, receptedAtFrom, receptedAtTo, offset, limit)
	return &MockreceptionRepoSearchCall{Call: call}
}

// MockreceptionRepoSearchCall wrap *gomock.Call
type MockreceptionRepoSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreceptionRepoSearchCall) Return(arg0 []model.Reception, arg1 error) *MockreceptionRepoSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreceptionRepoSearchCall) Do(f func(context.Context, *time.Time, *time.Time, int64, int64) ([]model.Reception, error)) *MockreceptionRepoSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreceptionRepoSearchCall) DoAndReturn(f func(context.Context, *time.Time, *time.Time, int64, int64) ([]model.Reception, error)) *MockreceptionRepoSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockproductRepo is a mock of productRepo interface.
type MockproductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepoMockRecorder
	isgomock struct{}
}

// MockproductRepoMockRecorder is the mock recorder for MockproductRepo.
type MockproductRepoMockRecorder struct {
	mock *MockproductRepo
}

// NewMockproductRepo creates a new mock instance.
func NewMockproductRepo(ctrl *gomock.Controller) *MockproductRepo {
	mock := &MockproductRepo{ctrl: ctrl}
	mock.recorder = &MockproductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepo) EXPECT() *MockproductRepoMockRecorder {
	return m.recorder
}

// GetByReceptionIDs mocks base method.
func (m *MockproductRepo) GetByReceptionIDs(ctx context.Context, receptionIDs []model.ReceptionID) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReceptionIDs", ctx, receptionIDs)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReceptionIDs indicates an expected call of GetByReceptionIDs.
func (mr *MockproductRepoMockRecorder) GetByReceptionIDs(ctx, receptionIDs any) *MockproductRepoGetByReceptionIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReceptionIDs", reflect.TypeOf((*MockproductRepo)(nil).GetByReceptionIDs), ctx, receptionIDs)
	return &MockproductRepoGetByReceptionIDsCall{Call: call}
}

// MockproductRepoGetByReceptionIDsCall wrap *gomock.Call
type MockproductRepoGetByReceptionIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockproductRepoGetByReceptionIDsCall) Return(arg0 []model.Product, arg1 error) *MockproductRepoGetByReceptionIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockproductRepoGetByReceptionIDsCall) Do(f func(context.Context, []model.ReceptionID) ([]model.Product, error)) *MockproductRepoGetByReceptionIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockproductRepoGetByReceptionIDsCall) DoAndReturn(f func(context.Context, []model.ReceptionID) ([]model.Product, error)) *MockproductRepoGetByReceptionIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
