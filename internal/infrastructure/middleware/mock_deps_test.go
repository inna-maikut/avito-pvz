// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package middleware -typed -destination mock_deps_test.go
//

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	model "github.com/inna-maikut/avito-pvz/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MocktokenProvider is a mock of tokenProvider interface.
type MocktokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MocktokenProviderMockRecorder
	isgomock struct{}
}

// MocktokenProviderMockRecorder is the mock recorder for MocktokenProvider.
type MocktokenProviderMockRecorder struct {
	mock *MocktokenProvider
}

// NewMocktokenProvider creates a new mock instance.
func NewMocktokenProvider(ctrl *gomock.Controller) *MocktokenProvider {
	mock := &MocktokenProvider{ctrl: ctrl}
	mock.recorder = &MocktokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenProvider) EXPECT() *MocktokenProviderMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MocktokenProvider) ParseToken(tokenStr string) (model.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenStr)
	ret0, _ := ret[0].(model.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MocktokenProviderMockRecorder) ParseToken(tokenStr any) *MocktokenProviderParseTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MocktokenProvider)(nil).ParseToken), tokenStr)
	return &MocktokenProviderParseTokenCall{Call: call}
}

// MocktokenProviderParseTokenCall wrap *gomock.Call
type MocktokenProviderParseTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenProviderParseTokenCall) Return(arg0 model.TokenInfo, arg1 error) *MocktokenProviderParseTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenProviderParseTokenCall) Do(f func(string) (model.TokenInfo, error)) *MocktokenProviderParseTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenProviderParseTokenCall) DoAndReturn(f func(string) (model.TokenInfo, error)) *MocktokenProviderParseTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
